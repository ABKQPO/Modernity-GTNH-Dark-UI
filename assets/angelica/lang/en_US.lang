options.button.shader=§7Shaders...

options.chunks=§7%s chunks
options.entityShadows=§7Entity Shadows
options.droppedItems=§7%s items
options.droppedItems.max=§7Unlimited
sodium.option_impact.low=§7Low
sodium.option_impact.medium=§7Medium
sodium.option_impact.high=§7High
sodium.option_impact.extreme=§7Extreme
sodium.option_impact.varies=§7Varies
sodium.options.pages.quality=§7Quality
sodium.options.pages.performance=§7Performance
sodium.options.pages.advanced=§7Advanced
sodium.options.view_distance.tooltip=§7The render distance controls how far away terrain will be rendered. Shorter distances mean that less terrain will be rendered, improving frame rates.
sodium.options.simulation_distance.tooltip=§7The simulation distance controls how far away terrain and entities will be loaded and ticked. Shorter distances can reduce the internal server's load and may improve frame rates.
sodium.options.brightness.tooltip=§7Controls the brightness (gamma) of the game.
sodium.options.clouds.name=§7Clouds
sodium.options.clouds.tooltip=§7Controls whether or not clouds will be visible.
sodium.options.gui_scale.tooltip=§7Sets the maximum scale factor to be used for the user interface. If 'auto' is used, then the largest scale factor will always be used.
sodium.options.fullscreen.tooltip=§7If enabled, the game will display in full-screen (if supported).
sodium.options.v_sync.tooltip=§7If enabled, the game's frame rate will be synchronized to the monitor's refresh rate, making for a generally smoother experience at the expense of overall input latency. This setting might reduce performance if your system is too slow.
sodium.options.fps_limit.tooltip=§7Limits the maximum number of frames per second. This can help reduce battery usage and general system load when multi-tasking. If V-Sync is enabled, this option will be ignored unless it is lower than your display's refresh rate.
sodium.options.view_bobbing.tooltip=§7If enabled, the player's view will sway and bob when moving around. Players who experience motion sickness while playing can benefit from disabling this.
sodium.options.attack_indicator.tooltip=§7Controls where the Attack Indicator is displayed on screen.
sodium.options.autosave_indicator.tooltip=§7If enabled, an indicator will be shown when the game is saving the world to disk.
sodium.options.graphics_quality.tooltip=§7The default graphics quality controls some legacy options and is necessary for mod compatibility. If the options below are left to "Default they will use this setting.
sodium.options.clouds_quality.tooltip=§7Controls the quality of rendered clouds in the sky.
sodium.options.weather_quality.tooltip=§7Controls the quality of rain and snow effects.
sodium.options.leaves_quality.name=§7Leaves Quality
sodium.options.leaves_quality.tooltip=§7Controls the quality of leaves.
sodium.options.grass_quality.name=§7Grass Quality
sodium.options.grass_quality.tooltip=§7Controls the quality of grass block sides.
sodium.options.sodium_smooth_lighting.name=§7Sodium Smooth Lighting
sodium.options.sodium_smooth_lighting.tooltip=§7If enabled, Sodium's lighting pipeline will be used for smooth lighting. This only has an effect if smooth lighting is enabled.
sodium.options.particle_quality.name=§7Particle Quality
sodium.options.particle_quality.tooltip=§7Controls the maximum number of particles which can be present on screen at any one time.
sodium.options.smooth_lighting.tooltip=§7Controls whether blocks will be smoothly lit and shaded. This slightly increases the amount of time needed to re-build a chunk, but doesn't affect frame rates.
sodium.options.biome_blend.value=§7%s block(s)
sodium.options.biome_blend.tooltip=§7Controls the range which biomes will be sampled for block colorization. Higher values greatly increase the amount of time it takes to build chunks for diminishing improvements in quality.
sodium.options.entity_distance.tooltip=§7Controls how far away entities can render from the player. Higher values increase the render distance at the expense of frame rates.
sodium.options.entity_shadows.tooltip=§7If enabled, basic shadows will be rendered beneath mobs and other entities.
sodium.options.vignette.name=§7Vignette
sodium.options.vignette.tooltip=§7If enabled, a vignette effect will be rendered on the player's view. This is very unlikely to make a difference to frame rates unless you are fill-rate limited.
sodium.options.mipmap_levels.tooltip=§7Controls the number of mipmaps which will be used for block model textures. Higher values provide better rendering of blocks in the distance, but may adversely affect performance with many animated textures.
sodium.options.use_chunk_multidraw.name=§7Chunk Multi-Draw
sodium.options.use_chunk_multidraw.tooltip=§7Multi-draw allows multiple chunks to be rendered with fewer draw calls, greatly reducing CPU overhead when rendering the world while also potentially allowing for more efficient GPU utilization. This optimization may cause issues with some graphics drivers, so you should try disabling it if you are experiencing glitches.
sodium.options.use_vertex_objects.name=§7Vertex Array Objects
sodium.options.use_vertex_objects.tooltip=§7Helps to improve performance by moving information about how vertex data should be rendered into the driver, allowing it to better optimize for repeated rendering of the same objects. There is generally no reason to disable this unless you're using incompatible mods.
sodium.options.use_block_face_culling.name=§7Block Face Culling
sodium.options.use_block_face_culling.tooltip=§7If enabled, only the sides of blocks which are facing the camera will be submitted for rendering. This can eliminate a large number of block faces very early in the rendering process, saving memory bandwidth and time on the GPU. Some resource packs may have issues with this option, so try disabling it if you're seeing holes in blocks.
sodium.options.use_compact_vertex_format.name=§7Compact Vertex Format
sodium.options.use_compact_vertex_format.tooltip=§7If enabled, a more compact vertex format will be used for rendering chunks. This can reduce graphics memory usage and bandwidth requirements significantly, especially for integrated graphics cards, but can cause z-fighting with some resource packs due to how it reduces the precision of position and texture coordinate attributes.
sodium.options.use_fog_occlusion.name=§7Fog Occlusion
sodium.options.use_fog_occlusion.tooltip=§7If enabled, chunks which are determined to be fully hidden by fog effects will not be rendered, helping to improve performance. The improvement can be more dramatic when fog effects are heavier (such as while underwater), but it may cause undesirable visual artifacts between the sky and fog in some scenarios.
sodium.options.use_entity_culling.name=§7Entity Culling
sodium.options.use_entity_culling.tooltip=§7If enabled, entities determined not to be in any visible chunks will be skipped during rendering. This can help improve performance by avoiding the rendering of entities located underground or behind walls.
sodium.options.use_particle_culling.name=§7Particle Culling
sodium.options.use_particle_culling.tooltip=§7If enabled, only particles which are determined to be visible will be rendered. This can provide a significant improvement to frame rates when many particles are nearby.
sodium.options.animate_only_visible_textures.name=§7Animate Only Visible Textures
sodium.options.animate_only_visible_textures.tooltip=§7If enabled, only animated textures determined to be visible will be updated. This can provide a significant boost to frame rates on some hardware, especially with heavier resource packs. If you experience issues with some textures not being animated, try disabling this option.
sodium.options.translucency_sorting.name=§7Translucency Sorting
sodium.options.translucency_sorting.tooltip=§7If enabled, translucent blocks will be sorted correctly from back to front to provide better rendering, especially when multiple translucent blocks are in view and layered.  This is a bit of an expensive operation.
sodium.options.cpu_render_ahead_limit.name=§7CPU Render-Ahead Limit
sodium.options.cpu_render_ahead_limit.tooltip=§7Specifies the maximum number of frames the CPU can be waiting on the GPU to finish rendering. Very low or high values may create frame rate instability.
sodium.options.cpu_render_ahead_limit.value=§7%s frame(s)
sodium.options.allow_direct_memory_access.name=§7Allow Direct Memory Access
sodium.options.allow_direct_memory_access.tooltip=§7If enabled, some critical code paths will be allowed to use direct memory access for performance. This often greatly reduces CPU overhead for chunk and entity rendering, but can make it harder to diagnose some bugs and crashes. You should only disable this if you've been asked to or otherwise know what you're doing.
sodium.options.ignore_driver_blacklist.name=§7Ignore Driver Blacklist
sodium.options.ignore_driver_blacklist.tooltip=§7If enabled, known incompatibilities with your hardware/driver configuration will be ignored, allowing you to enable options that may cause issues with your game. You should generally not touch this option unless you know exactly what you are doing. After changing this option, you must save, close, and then re-open the settings screen.
sodium.options.enable_memory_tracing.name=§7Enable Memory Tracing
sodium.options.enable_memory_tracing.tooltip=§7Debugging feature. If enabled, stack traces will be collected alongside memory allocations to help improve diagnostic information when memory leaks are detected.
sodium.options.performance_impact_string=§7Performance Impact: %s
sodium.options.use_persistent_mapping.name=§7Persistent Mapping
sodium.options.use_persistent_mapping.tooltip=§7If enabled, a small amount of memory will be persistently mapped for speeding up chunk updates and entity rendering.\n\nRequires OpenGL 4.4 or ARB_buffer_storage.
sodium.options.chunk_memory_allocator.name=§7Chunk Memory Allocator
sodium.options.chunk_memory_allocator.tooltip=§7Selects the memory allocator that will be used for chunk rendering.\n- ASYNC: Fastest option, works well with most modern graphics drivers.\n- SWAP: Fallback option for older graphics drivers. May increase memory usage significantly.
sodium.options.chunk_memory_allocator.async=§7Async
sodium.options.chunk_memory_allocator.swap=§7Swap
sodium.options.chunk_update_threads.name=§7Chunk Update Threads
sodium.options.chunk_update_threads.tooltip=§7Specifies the number of threads to use for chunk building. Using more threads can speed up chunk loading and update speed, but may negatively impact frame times.
sodium.options.always_defer_chunk_updates.name=§7Always Defer Chunk Updates
sodium.options.always_defer_chunk_updates.tooltip=§7If enabled, rendering will never wait for chunk updates to finish, even if they are important. This can greatly improve frame rates in some scenarios, but it may create significant visual lag in the world.
sodium.options.use_no_error_context.name=§7No Error Context
sodium.options.use_no_error_context.tooltip=§7If enabled, the OpenGL context will be created with error checking disabled. This may slightly improve performance, but it also increases the risk that the game will crash instead of gracefully handling OpenGL errors. You should disable this option if you are experiencing sudden unexplained crashes.
sodium.options.use_gl_state_cache.name=§7GL State Cache
sodium.options.use_gl_state_cache.tooltip=§7If enabled, the OpenGL state cache will be used to reduce the number of redundant state changes. This can improve performance, but it may also cause issues with some mods.  Does not persist across game restarts.
sodium.options.threads.value=§7%s thread(s)
sodium.options.default=§7Default
sodium.options.buttons.undo=§7Undo
sodium.options.buttons.apply=§7Apply
sodium.options.buttons.donate=§7Buy coffee for JellySquid!
options.dynamic_fov=§7Dynamic FOV
options.dynamic_fov.tooltip=§7If enabled, the game's field of view will change based on the player's speed.
options.framerate=§7%s FPS
iris.shaders.toggled=§7Toggled shaders to %s!
iris.shaders.disabled=§7Shaders disabled!
options.iris.apply=§7Apply
options.iris.refresh=§7Refresh
options.iris.openShaderPackFolder=§7Open Shader Pack Folder...
options.iris.shaderPackSettings=§7Shader Pack Settings...
options.iris.shaderPackList=§7Shader Pack List...
options.iris.refreshShaderPacks=§7Refresh Shader Packs
options.iris.shaderPackSelection=§7Shader Packs...
options.iris.shaderPackSelection.title=§7Shader Packs
options.iris.shaderPackSelection.addedPack=§7Added Shader Pack "%s"
options.iris.shaderPackSelection.addedPacks=§7Added %s Shader Packs
options.iris.shaderPackSelection.failedAdd=§7Files were not valid Shader Packs
options.iris.shaderPackSelection.failedAddSingle=§7"%s" is not a valid Shader Pack
options.iris.shaderPackSelection.copyError=§7Could not add Shader Pack "%s"
options.iris.shaderPackSelection.copyErrorAlreadyExists=§7"%s" is already in your Shader Packs folder!
options.iris.shaderPackOptions.tooManyFiles=§7Cannot import multiple Shader Settings files!
options.iris.shaderPackOptions.failedImport=§7Failed to import Shader Settings file "%s"
options.iris.shaderPackOptions.importedSettings=§7Imported Shader Settings from "%s"
options.iris.shaders.disabled=§7Shaders: Disabled
options.iris.shaders.enabled=§7Shaders: Enabled
options.iris.shaders.nonePresent=§7Shaders: No Packs Present
options.iris.back=§7Back
options.iris.reset=§7Reset
options.iris.reset.tooltip=§7Reset ALL options and apply?
options.iris.reset.tooltip.holdShift=§7Hold SHIFT and click to reset
options.iris.importSettings.tooltip=§7Import settings from file
options.iris.exportSettings.tooltip=§7Export applied settings to file
options.iris.mustDisableFullscreen=§7Please disable fullscreen first!
options.iris.setToDefault=§7Set option to default value?
options.iris.profile=§7Profile
options.iris.profile.custom=§7Custom
options.iris.shadowDistance=§7Max Shadow Distance
options.iris.shadowDistance.sodium_tooltip=§7Max Shadow Distance
options.iris.shadowDistance.enabled=§7Allows you to change the maximum distance for shadows. Terrain and entities beyond this distance will not cast shadows. Lowering the shadow distance can significantly increase performance.
options.iris.shadowDistance.disabled=§7Your current shader pack has already set a render distance for shadows; you cannot change it.
options.iris.gui.hide=§7Hide GUI
options.iris.gui.show=§7Show GUI
options.dynamic_lights=§7Dynamic Lights
options.dynamic_lights.tooltip=§7Enables dynamic lights. Modes: OFF - off, FASTEST - 500ms delay, FAST - 250ms delay, FANCY - 50ms delay, REALTIME - no delay.
options.dynamic_lights_shader_force=§7Dynamic Lights - Forced With Shaders
options.dynamic_lights_shader_force.tooltip=§7Enabled - Dynamic Lights are shown even when a shader is active, Disabled - Dynamic Lights are disabled when a shader is active.
options.angelica.droppedItemLimit=§7Dropped Item Render Limit
options.angelica.droppedItemLimit.tooltip=§7The maximum number of dropped items that will be rendered. Lower values can improve performance.
options.angelica.mobSpawnerRenderDistance=§7Mob spawner render distance
options.angelica.mobSpawnerRenderDistance.tooltip=§7Render distance for the spinning mob inside mod spawners
options.angelica.itemdisplaylistcount=§7Item Renderer Display List Cache Size
options.angelica.itemdisplaylistcount.tooltip=§7The maximum number of display lists to cache in the optimized item renderer. Higher values will increase performance but increase VRAM usage.
options.angelica.sleepbeforeswap=§7Alternate FPS Limiter
options.angelica.sleepbeforeswap.tooltip=§7Switches to an alternate FPS limiter that gives more stable frametimes, in exchange for slightly more latency. Will never introduce more than one frame of latency, and has a lower impact at higher framerates.
pack.iris.select.title=§7Select
pack.iris.configure.title=§7Configure
label.iris.true=§7On
label.iris.false=§7Off
